generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AuthProvider {
  EMAIL
  GOOGLE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum PlanType {
  STARTER
  PROFESSIONAL
  AGENCY
  ENTERPRISE
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  TIKTOK
  YOUTUBE
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  CAROUSEL
  STORY
}

enum ContentType {
  ORIGINAL
  REPOST
  RECYCLED
}

enum TeamRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// USER & AUTHENTICATION
model User {
  id                   String       @id @default(cuid())
  firstName            String
  lastName             String
  email                String       @unique
  avatar               String?
  password             String?
  isVerified           Boolean      @default(false)
  authProvider         AuthProvider
  googleId             String?
  verificationCode     Int?
  verificationExpires  DateTime?
  resetPasswordEmail   Int?
  resetPasswordExpires DateTime?
  lastLoginAt          DateTime?
  timezone             String       @default("UTC")

  sessions       Session[]
  subscription   Subscription?
  socialAccounts SocialAccount[]
  posts          Post[]
  teams          TeamMember[]
  ownedTeams     Team[]           @relation("TeamOwner")
  contentLibrary ContentLibrary[]
  aiUsage        AIUsage[]
  analytics      Analytics[]
  notifications  Notification[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostApproval PostApproval[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// SUBSCRIPTION & BILLING MODELS
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType             PlanType
  status               SubscriptionStatus
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// SOCIAL MEDIA ACCOUNTS MODELS
model SocialAccount {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform       SocialPlatform
  accountId      String // Platform-specific account ID
  username       String
  displayName    String
  profilePicture String?
  accessToken    String
  refreshToken   String?
  tokenExpiresAt DateTime?
  isActive       Boolean        @default(true)
  lastSyncAt     DateTime?

  posts     Post[]
  analytics Analytics[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostPlatform PostPlatform[]

  @@unique([userId, platform, accountId])
  @@map("social_accounts")
}

// POSTS & CONTENT MODELS
model Post {
  id     String  @id @default(cuid())
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  title    String?
  content  String
  hashtags String[]
  mentions String[]

  postType    PostType
  contentType ContentType @default(ORIGINAL)
  status      PostStatus  @default(DRAFT)

  scheduledAt   DateTime?
  publishedAt   DateTime?
  failureReason String?

  // AI Generated Content
  aiGenerated Boolean @default(false)
  aiPrompt    String?

  // Media
  mediaUrls    String[]
  thumbnailUrl String?

  platforms PostPlatform[]
  analytics Analytics[]
  approvals PostApproval[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  SocialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id])
  socialAccountId String?

  @@map("posts")
}

model PostPlatform {
  id              String        @id @default(cuid())
  postId          String
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  platformPostId String? // ID from the social platform
  status         PostStatus
  publishedAt    DateTime?
  failureReason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, socialAccountId])
  @@map("post_platforms")
}

// TEAM & COLLABORATION
model Team {
  id          String  @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User    @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members TeamMember[]
  posts   Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  teamId String
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   TeamRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
  @@map("team_members")
}

model PostApproval {
  id         String         @id @default(cuid())
  postId     String
  post       Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  approverId String
  approver   User           @relation(fields: [approverId], references: [id])
  status     ApprovalStatus
  comment    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, approverId])
  @@map("post_approvals")
}

// CONTENT LIBRARY MODELS
model ContentLibrary {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  mediaUrl    String
  mediaType   String
  tags        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content_library")
}

// AI USAGE TRACKING
model AIUsage {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature    String // caption_generation, hashtag_generation, image_generation
  tokensUsed Int
  cost       Decimal @db.Decimal(10, 4)

  createdAt DateTime @default(now())

  @@map("ai_usage")
}

// ANALYTICS MODELS
model Analytics {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId          String?
  post            Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  platform SocialPlatform
  date     DateTime

  // Engagement Metrics
  likes       Int @default(0)
  shares      Int @default(0)
  comments    Int @default(0)
  clicks      Int @default(0)
  impressions Int @default(0)
  reach       Int @default(0)

  // Follower Metrics (for account-level analytics)
  followers Int?
  following Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, platform, date])
  @@map("analytics")
}

// NOTIFICATIONS MODEL
model Notification {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title    String
  message  String
  type     String
  isRead   Boolean @default(false)
  metadata Json? // Additional data

  createdAt DateTime @default(now())

  @@map("notifications")
}
